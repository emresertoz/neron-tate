import "archimedean_part.mag": MoveAway;

function is_weier(P)
  if Degree(P) gt 1 then 
    return false;
  end if;
  return IsWeierstrassPlace(P);
end function;

function MoveAwayMultiple(D, E : bP := 0, Weierstrass := false, MultipleBound := 20)

  // Find a divisor D' and an integer n such that D' is linearly equivalent   // to n*D and has support disjoint from E.
  // bP is a base point. If Weierstrass is true, also move away from the 
  // Weierstrass locus of the curve.
  //
  if (Type(bP) eq RngIntElt) and (bP eq 0) then
    supp := Support(D);
    if Weierstrass then 
      supp := [pl : pl in supp | not is_weier(pl)];
    end if;
    for pl in supp do
      if GCD(pl, Numerator(E) + Denominator(E)) eq DivisorGroup(Curve(D))!0 then
        bP := pl;
        break;
      end if;
    end for;
    if (Type(bP) eq RngIntElt) and (bP eq 0) then
      vprint Debug, 2: "No base point found. Trying with random point.";
      bP := RandomPlace(Curve(D));
    end if;
  end if;
  if Weierstrass and is_weier(bP) then
    vprint Debug, 2: "No non-Weierstrass base point found. Trying with random point.";
    repeat 
      bP := RandomPlace(Curve(D));
    until not is_weier(bP);
  end if;

  bP := Divisor(bP);

  n := 0;
  done := false;
  repeat
    n +:= 1;
    if n gt MultipleBound then
      error "Can't find a good multiple of D";
    end if;
    Dred2num, r1 := Reduction(Numerator(n*D), bP);
    Dred2den, r2 := Reduction(Denominator(n*D), bP);
    if GCD(Dred2num + Dred2den + Abs(r1 - r2)*bP, Numerator(E) 
                        + Denominator(E)) eq DivisorGroup(Curve(D))!0 then
      done := true;
      if Weierstrass then 
        if &or[is_weier(Q) : Q in Support(Dred2num + Dred2den)
                                                     | Degree(Q) eq 1] then
          done := false;
        end if;
      end if;
    end if;
  until done;
  return Dred2num - Dred2den + (r1 - r2)*bP, n;

end function;



intrinsic NTHeightPairing(D1, D2, K, InfDiv : Precision := 50) -> FldReElt
{
  Compute the Neron-Tate height pairing between the classes of the divisors 
  D1 and D2. Here K is a canonical divisor, used in the computation of the
  archimedean contribution and InfDiv is the divisor at infinity.
  Precision is the output precision.
}
  assert (IsEffective(InfDiv));
  assert (GCD(Numerator(K) + Denominator(K), InfDiv) eq DivisorGroup(Curve(D1))!0);
  // Need to move away from InfDiv because of bugs in Abel-Jacobi
  // map on Riemann surface.
//	E1, n1 := MoveAwayMultiple(D1, InfDiv);
  try 
    E1, n1 := MoveAwayMultiple(D1, InfDiv : Weierstrass, MultipleBound := 20);
  catch e 
    vprint Debug, 1: "No good multiple of D found. Swap D1 and D2.";
    tmp := D2;
    D2 := D1;
    D1 := tmp;
    E1, n1 := MoveAwayMultiple(D1, InfDiv : Weierstrass, MultipleBound := 20);
  end try;

  assert(IsLinearlyEquivalent(n1*D1, E1));
  vprint Debug, 2: "D1 moved away from InfDiv";
  E2, n2 := MoveAwayMultiple(D2, InfDiv + Numerator(E1) + Denominator(E1));
  //E2, n2 := MoveAwayMultiple(D2, Numerator(E1) + Denominator(E1));
  assert(IsLinearlyEquivalent(n2*D2, E2));
  vprint Debug, 2: "D2 moved away from D1 and InfDiv";
  non_arch := NonArchimedeanPairing(E1, E2 : Precision := Precision);

  C := Curve(E1);
  C_affine := AffinePatch(C, 1);
  AugmentPlaneCurve(C_affine : Precision := Precision);
  arch := ArchimedeanNeronPairing(C_affine,E1,E2);

        /* Old code
	if (not(assigned(Curve(D1)`RiemannSurface)) or (Curve(D1)`RiemannSurface`Prec lt Precision)) then
		C := Curve(D1);
		_<X,Y> := PolynomialRing(Rationals(), 2);
		f := Evaluate(Equation(C), [X, Y, 1]);
		RS := RiemannSurface(f : Precision := Precision);	
		C`RiemannSurface := RS;
	end if;
	RS := Curve(D1)`RiemannSurface;
        time arch_rds := -ArchimedeanPairing(E1, E2, K : Precision := Precision, RS := RS);
        */
  
  return (arch-non_arch) / (n1*n2), arch, non_arch;
end intrinsic;

intrinsic HeightPairing(D1::DivCrvElt, D2::DivCrvElt : Precision := 50) -> FldReElt
{
  Compute the Neron-Tate height pairing between the classes of the divisors 
  D1 and D2.
  Precision is the output precision.
}
  require Degree(D1) eq 0 and Degree(D2) eq 0: 
                  "The divisors need to have degree 0";
  C := Curve(D1);
  require Type(BaseRing(C)) eq FldRat:
                  "Only implemented over the rationals";
  K := CanonicalDivisor(C);
  InfDiv := DivisorAtInfinity(C);
  K2 := MoveAway(K, InfDiv);
  assert(IsCanonical(K2));
  vprint Debug, 1: "Start NTHeightPairing";
  return NTHeightPairing(D1, D2, K2, InfDiv : Precision := Precision);
end intrinsic;

intrinsic Height(D::DivCrvElt : Precision := 50) -> FldReElt
{
  Compute the Neron-Tate height of the classes of the divisor D.
  Precision is the output precision.
}
    
  return HeightPairing(D, D : Precision := Precision);

end intrinsic;
